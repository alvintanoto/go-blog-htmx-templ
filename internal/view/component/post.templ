package vcomponent

import (
	"alvintanoto.id/blog-htmx-templ/internal/dto"
	"strconv"
	"fmt"
)

templ emptyPostStatePage() {
	<div class="overflow-y-scroll mt-[144px] flex items-center justify-center flex-col">
		<div class="text-3xl font-light my-1">
			<svg width="72px" height="72px">
				<image xlink:href="/assets/icons/empty.svg" width="72px" height="72px"></image>
			</svg>
		</div>
		<div class="text-3xl font-light my-1">
			So Empty ...
		</div>
	</div>
}

templ NewPostButton(text string) {
	<div class="bg-primary text-white text-center px-3 py-2 rounded-3xl cursor-pointer hover:bg-primary/90">
		<a href="/post/new-post" class="flex flex-row items-center">
			<div class="min-h-[24px] min-w-[24px] flex items-center justify-center m-auto text-white">
				<svg width="16px" height="16px" class="stroke-white">
					<image xlink:href="/assets/icons/new_post.svg" width="16px" height="16px"></image>
				</svg>
			</div>
			if text != "" {
				{ text }
			} else {
				New Post
			}
		</a>
	</div>
}

templ PostDetailNoPostFound() {
	<div class="w-full">
		<div class="min-h-[90vh] text-center flex justify-center items-center text-4xl font-light">404 <br/> Page Not Found </div>
	</div>
}

templ PostDetail (post dto.PostDTO, theme string) {
	<div
		class={ "flex flex-row w-full cursor-pointer max-w-[960px] mx-auto" }
	>
		<div class="w-[36px] h-[36px]  border-warning p-2 mr-2 ">
			<div
				class={ "min-h-[36px] min-w-[36px] rounded-full flex items-center justify-center m-auto cursor-pointer",
					templ.KV("bg-separator", theme == "1"),
					templ.KV("bg-dark-separator", theme == "0") }
			>
				<svg width="16px" height="16px">
					<image xlink:href="/assets/icons/user_2.svg" width="16px" height="16px"></image>
				</svg>
			</div>
		</div>
		<div class="min-h-[96px] p-2 flex flex-col justify-between w-full">
			<div class="mb-2">&#64;{ post.Poster.Username } &#8226; <span class="text-sm text-black-grey">{ post.PostedAt }</span></div>
			<div class="mb-3 max-w-[960px] text-base">{ post.Content } </div>
		</div>
	</div>
	<div
		class={
			"max-w-[960px] mx-auto text-sm flex flex-row justify-evenly border-y",
			templ.KV("border-separator", theme == "1"),
			templ.KV("border-dark-separator", theme == "0"),
		}
	>
		<div
			class={
				"hover:text-primary rounded-md cursor-pointer flex flex-row items-center flex-1 py-2 flex justify-center",
				templ.KV("hover:bg-separator", theme == "1"),
				templ.KV("hover:bg-dark-separator", theme == "0"),
			}
		>
			{ strconv.Itoa(post.Likes) } Likes
		</div>
		<div
			class={
				"hover:text-primary rounded-md cursor-pointer flex flex-row items-center flex-1 py-2 flex justify-center",
				templ.KV("hover:bg-separator", theme == "1"),
				templ.KV("hover:bg-dark-separator", theme == "0"),
			}
		>
			{ strconv.Itoa(post.Dislikes) } Dislikes
		</div>
		<div
			class={
				"hover:text-primary rounded-md cursor-pointer flex flex-row items-center flex-1 py-2 flex justify-center",
				templ.KV("hover:bg-separator", theme == "1"),
				templ.KV("hover:bg-dark-separator", theme == "0"),
			}
		>
			{ strconv.Itoa(post.ReplyCounts) } Replies
		</div>
		<div
			class={
				"hover:text-primary rounded-md cursor-pointer flex flex-row items-center flex-1 py-2 flex justify-center",
				templ.KV("hover:bg-separator", theme == "1"),
				templ.KV("hover:bg-dark-separator", theme == "0"),
			}
		>
			{ strconv.Itoa(post.Impressions) } Impressions
		</div>
	</div>
}

templ Post (post dto.PostDTO, theme string) {
	<div
		class={ "flex flex-row w-full border-b cursor-pointer max-w-[960px] mx-auto",
			templ.KV("border-default-border", theme == "1"),
			templ.KV("border-dark-default-border", theme == "0") }
	>
		<div class="w-[36px] h-[36px] border-warning p-2 mr-2 ">
			<div
				class={ "min-h-[36px] min-w-[36px] rounded-full flex items-center justify-center m-auto cursor-pointer",
					templ.KV("bg-separator", theme == "1"),
					templ.KV("bg-dark-separator", theme == "0") }
			>
				<svg width="16px" height="16px">
					<image xlink:href="/assets/icons/user_2.svg" width="16px" height="16px"></image>
				</svg>
			</div>
		</div>
		<div class="min-h-[96px] p-2  flex flex-col justify-between w-full">
			<div class="mb-2">&#64;{ post.Poster.Username } &#8226; <span class="text-sm">{ post.PostedAt }</span></div>
			<div class="mb-3 max-w-[960px]">{ post.Content } </div>
			<div class="text-sm flex flex-row" onclick="return false;">
				<div class="hover:text-primary hover:bg-separator px-1 rounded-md cursor-pointer flex flex-row items-center">
					{ strconv.Itoa(post.Likes) } Likes
				</div>
				<div class="hover:text-primary hover:bg-separator px-1 rounded-md cursor-pointer flex flex-row items-center ml-2">
					{ strconv.Itoa(post.Dislikes) } Dislikes
				</div>
				<div class="hover:text-primary hover:bg-separator px-1 rounded-md cursor-pointer flex flex-row items-center ml-2">
					{ strconv.Itoa(post.ReplyCounts) } Replies
				</div>
				<div class="hover:text-primary hover:bg-separator px-1 rounded-md cursor-pointer flex flex-row items-center ml-2">
					{ strconv.Itoa(post.Impressions) } Impressions
				</div>
			</div>
		</div>
	</div>
}

templ ProfilePosts (posts []dto.PostDTO, lastPosition int, theme string) {
	if len(posts) > 0 {
		for idx, post := range posts {
			<a href={ templ.URL(fmt.Sprintf("/post/%d", post.ID)) }>
				<div
					if len(posts)-1 == idx && len(posts)>= 15 {
						hx-get={ fmt.Sprintf("/profile/load-posts?last_position=%d", lastPosition) }
						hx-on="htmx:afterRequest: htmx.remove('#loading')"
						hx-trigger="intersect once"
						hx-swap="afterend"
					}
				>
					@Post(post, theme)
				</div>
			</a>
		}
		if len(posts) >= 15 {
			<div id="loading" class="animate-spin min-h-[24px] min-w-[24px] flex items-center justify-center m-auto text-white">
				<svg width="16px" height="16px" class="stroke-white">
					<image xlink:href="/assets/icons/spin.svg" width="16px" height="16px"></image>
				</svg>
			</div>
		}
	} else {
		if lastPosition == 0 && len(posts) <=0 {
			@emptyPostStatePage()
		}
	}
}

templ TimelinePosts (posts []dto.PostDTO, lastPosition int, theme string) {
	if len(posts) > 0 {
		for idx, post := range posts {
			<a href={ templ.URL(fmt.Sprintf("/post/%d", post.ID)) }>
				<div
					if len(posts)-1 == idx && len(posts)>= 15 {
						hx-get={ fmt.Sprintf("/load-posts?last_position=%d", lastPosition) }
						hx-on="htmx:afterRequest: htmx.remove('#loading')"
						hx-trigger="intersect once"
						hx-swap="afterend"
					}
				>
					@Post(post, theme)
				</div>
			</a>
		}
		if len(posts) >= 15 {
			<div id="loading" class="animate-spin min-h-[24px] min-w-[24px] flex items-center justify-center m-auto text-white">
				<svg width="16px" height="16px" class="stroke-white">
					<image xlink:href="/assets/icons/spin.svg" width="16px" height="16px"></image>
				</svg>
			</div>
		}
	} else {
		if lastPosition == 0 && len(posts) <=0 {
			@emptyPostStatePage()
		}
	}
}
